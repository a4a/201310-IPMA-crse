ls()
install.packages(repos="http://flr-project.org/Rdevel")
install.packages(repos="http://flr-project.org/Rdev")
install.packages("plyr")
install.packages("~/devel/FLR/git/FLCore_2.5.20130628.tar.gz", repos = NULL, type = "source")
install.packages("~/jrc/a4a/packages/FLa4a_0.9.2.tar.gz", repos = NULL, type = "source")
install.packages("/media/ernesto/USB DISK/software/linux/packages/ADGofTest_0.3.tar.gz", repos = NULL, type = "source")
install.packages("/media/ernesto/USB DISK/software/linux/packages/copula_0.999-7.tar.gz", repos = NULL, type = "source")
install.packages("/media/ernesto/USB DISK/software/linux/packages/gsl_1.9-9.tar.gz", repos = NULL, type = "source")
install.packages("XML")
install.packages("XML")
install.packages("reshape2")
fmodel <- ~ s(age, k=4) + s(year, k = 20)
qmodel <- list( ~ factor(age))
fit1 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
library(FLa4a)
fit1 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
library(FLa4a)
library(XML)
library(reshape2)
data(rfLen)
data(ple4)
data(ple4.indices)
fit1 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
wireframe(data ~ year + age, data = as.data.frame(harvest(fit2)), drape = TRUE)
wireframe(data ~ year + age, data = as.data.frame(harvest(fit1)), drape = TRUE)
fmodel <- ~ s(age, k=4) + s(year, k = 20) + te(age, year, k = c(3,3))
qmodel <- list( ~ factor(age))
fit2 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
wireframe(data ~ year + age, data = as.data.frame(harvest(fit2)), drape = TRUE)
fmodel <- ~ te(age, year, k = c(4,20))
qmodel <- list( ~ factor(age))
fit2 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
wireframe(data ~ year + age, data = as.data.frame(harvest(fit2)), drape = TRUE)
fmodel <- ~ te(age, year, k = c(4,20)) + s(year, k = 5, by = as.numeric(age==1))
qmodel <- list( ~ factor(age))
fit3 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
wireframe(data ~ year + age, data = as.data.frame(harvest(fit3)), drape = TRUE)
ls()
rnorm(100000)
rnorm(10000000)
install.packages("FLCore",
repos="http://flr-project.org/Rdevel")
install.packages("devtools")
install.packages("devtools")
install_github("a4a", "colinpmillar", subdir =
"packages/FLa4a")
library(ldevtools)
library(devtools)
install_github("a4a", "colinpmillar", subdir =
"packages/FLa4a")
library(FLa4a)
data(ple4)
data(ple4.indices)
fmodel <- ~factor(age) + factor(year)
qmodel <- list(~factor(age))
rmodel <- ~factor(year)
fit <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4, indices=ple4.indices["BTS-Isis"])
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4, indices=ple4.indices["BTS-Isis"], fit = "assessment")
fit <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4, indices=ple4.indices["BTS-Isis"])
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4, indices=ple4.indices["BTS-Isis"], fit = "assessment")
index(fit)
residuals(fit)
ple4_a4a <- ple4 + fit # fitted stock
ple4_a4a_sa <- propagate(ple4, 1000) + fit_sa # simulated stock
plot(ple4_a4a_sa)
sn <- apply(stock.n(ple4_a4a_sa),1:5, median)
sn[,ac(2002:2008)]
stock.n(ple4_a4a)[,ac(2002:2008)]
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4_a4a_sa, indices=ple4.indices["BTS-Isis"], fit = "assessment")
idx <- propagate(ple4.indices["BTS-Isis"], 1000)
idx <- propagate(ple4.indices[["BTS-Isis"]], 1000)
index(idx)
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4_a4a_sa, indices=FLIndices(a=idx), fit = "assessment")
catch.n(ple4_a4a_sa)
iter(catch.n(ple4_a4a_sa))
iters(catch.n(ple4_a4a_sa))
dim(catch.n(ple4_a4a_sa))
dim(idx@index)
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4_a4a_sa, indices=FLIndices(bts=propagate(ple4.indices["BTS-Isis"], 1000), fit = "assessment")
)
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4_a4a_sa, indices=FLIndices(bts=propagate(ple4.indices[["BTS-Isis"]], 1000)), fit = "assessment")
library(FLa4a)
library(FLa4a)
data(ple4)
data(ple4.indices)
fmodel <- ~factor(age) + factor(year)
qmodel <- list(~factor(age))
rmodel <- ~factor(year)
fit <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4, indices=ple4.indices["BTS-Isis"])
stk <- propagate(ple4, 1000)
idx <- FLIndices(bts=propagate(ple4.indices[["BTS-Isis"]], 1000))
dims(stk)
dims(idx)
dims(idx[[1]])
stock <- propagate(ple4, 1000)
indices <- FLIndices(bts=propagate(ple4.indices[["BTS-Isis"]], 1000))
dms <- do.call(rbind.data.frame, c(list(catch = c(dims(stock), startf = NA, endf = NA)), lapply(indices, dims)))
dms
if (any(dms $ season[-1] > 1)) stop("only one season per survey - please split into seperate surveys.")
if (!identical(sort(unique(dms $ iter)), sort(unique(c(1L, max(dms $ iter)))))) stop("incosistent number of iterations in stock and indices")
sort(unique(dms $ iter))
sort(unique(c(1L, max(dms $ iter))))
sort(unique(dms $ iter))
sort(unique(c(1L, max(dms $ iter))))
stock <- propagate(ple4, 1000)
indices <- FLIndices(bts=propagate(ple4.indices[["BTS-Isis"]], 1000))
dms <- do.call(rbind.data.frame, c(list(catch = c(dims(stock), startf = NA, endf = NA)), lapply(indices, dims)))
# only allow 1 season for surveys
if (any(dms $ season[-1] > 1)) stop("only one season per survey - please split into seperate surveys.")
# the check
if (!identical(sort(unique(dms $ iter)), sort(unique(c(1L, max(dms $ iter)))))) stop("incosistent number of iterations in stock and indices")
sort(unique(dms $ iter))
sort(unique(c(1L, max(dms $ iter))))
setwd("~/jrc/a4a/courses/2013-IPIMAR/02-FLR")
Sweave("FLRin10slides.Rnw")
library(FLCore)
data(ple4)
plot(ple4)
summary(ple4)
cth <- catch(ple4)
plot(cth)
data(ple4.index)
plot(ple4.index)
idx <- index(ple4.index)
summary(idx)
plot(idx)
summary(ple4.index)
ple4.sr <- as.FLSR(ple4, model="bevholt")
ple4.sr <- fmle(ple4.sr)
plot(ple4.sr)
flqs <- FLQuants(c=catch(ple4), b=stock(ple4))
plot(flqs)
is(flqs)
xyplot(data~year, groups=qname, data=flqs)
xyplot(data~year, groups=qname, data=flqs, type="l")
Sweave("FLRin10slides.Rnw")
FLQuant()
dim(FLQuant())
dimnames(FLQuant())
names(dimnames(FLQuant()))
showClass("FLQuant")
