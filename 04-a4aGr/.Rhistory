ls()
install.packages(repos="http://flr-project.org/Rdevel")
install.packages(repos="http://flr-project.org/Rdev")
install.packages("plyr")
install.packages("~/devel/FLR/git/FLCore_2.5.20130628.tar.gz", repos = NULL, type = "source")
install.packages("~/jrc/a4a/packages/FLa4a_0.9.2.tar.gz", repos = NULL, type = "source")
install.packages("/media/ernesto/USB DISK/software/linux/packages/ADGofTest_0.3.tar.gz", repos = NULL, type = "source")
install.packages("/media/ernesto/USB DISK/software/linux/packages/copula_0.999-7.tar.gz", repos = NULL, type = "source")
install.packages("/media/ernesto/USB DISK/software/linux/packages/gsl_1.9-9.tar.gz", repos = NULL, type = "source")
install.packages("XML")
install.packages("XML")
install.packages("reshape2")
fmodel <- ~ s(age, k=4) + s(year, k = 20)
qmodel <- list( ~ factor(age))
fit1 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
library(FLa4a)
fit1 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
library(FLa4a)
library(XML)
library(reshape2)
data(rfLen)
data(ple4)
data(ple4.indices)
fit1 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
wireframe(data ~ year + age, data = as.data.frame(harvest(fit2)), drape = TRUE)
wireframe(data ~ year + age, data = as.data.frame(harvest(fit1)), drape = TRUE)
fmodel <- ~ s(age, k=4) + s(year, k = 20) + te(age, year, k = c(3,3))
qmodel <- list( ~ factor(age))
fit2 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
wireframe(data ~ year + age, data = as.data.frame(harvest(fit2)), drape = TRUE)
fmodel <- ~ te(age, year, k = c(4,20))
qmodel <- list( ~ factor(age))
fit2 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
wireframe(data ~ year + age, data = as.data.frame(harvest(fit2)), drape = TRUE)
fmodel <- ~ te(age, year, k = c(4,20)) + s(year, k = 5, by = as.numeric(age==1))
qmodel <- list( ~ factor(age))
fit3 <- a4a(fmodel, qmodel, stock = ple4, indices = ple4.indices[1])
wireframe(data ~ year + age, data = as.data.frame(harvest(fit3)), drape = TRUE)
ls()
rnorm(100000)
rnorm(10000000)
install.packages("FLCore",
repos="http://flr-project.org/Rdevel")
install.packages("devtools")
install.packages("devtools")
install_github("a4a", "colinpmillar", subdir =
"packages/FLa4a")
library(ldevtools)
library(devtools)
install_github("a4a", "colinpmillar", subdir =
"packages/FLa4a")
library(FLa4a)
data(ple4)
data(ple4.indices)
fmodel <- ~factor(age) + factor(year)
qmodel <- list(~factor(age))
rmodel <- ~factor(year)
fit <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4, indices=ple4.indices["BTS-Isis"])
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4, indices=ple4.indices["BTS-Isis"], fit = "assessment")
fit <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4, indices=ple4.indices["BTS-Isis"])
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4, indices=ple4.indices["BTS-Isis"], fit = "assessment")
index(fit)
residuals(fit)
ple4_a4a <- ple4 + fit # fitted stock
ple4_a4a_sa <- propagate(ple4, 1000) + fit_sa # simulated stock
plot(ple4_a4a_sa)
sn <- apply(stock.n(ple4_a4a_sa),1:5, median)
sn[,ac(2002:2008)]
stock.n(ple4_a4a)[,ac(2002:2008)]
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4_a4a_sa, indices=ple4.indices["BTS-Isis"], fit = "assessment")
idx <- propagate(ple4.indices["BTS-Isis"], 1000)
idx <- propagate(ple4.indices[["BTS-Isis"]], 1000)
index(idx)
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4_a4a_sa, indices=FLIndices(a=idx), fit = "assessment")
catch.n(ple4_a4a_sa)
iter(catch.n(ple4_a4a_sa))
iters(catch.n(ple4_a4a_sa))
dim(catch.n(ple4_a4a_sa))
dim(idx@index)
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4_a4a_sa, indices=FLIndices(bts=propagate(ple4.indices["BTS-Isis"], 1000), fit = "assessment")
)
fit_sa <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4_a4a_sa, indices=FLIndices(bts=propagate(ple4.indices[["BTS-Isis"]], 1000)), fit = "assessment")
library(FLa4a)
library(FLa4a)
data(ple4)
data(ple4.indices)
fmodel <- ~factor(age) + factor(year)
qmodel <- list(~factor(age))
rmodel <- ~factor(year)
fit <- a4a(fmodel = fmodel, qmodel = qmodel, srmodel = rmodel, stock=ple4, indices=ple4.indices["BTS-Isis"])
stk <- propagate(ple4, 1000)
idx <- FLIndices(bts=propagate(ple4.indices[["BTS-Isis"]], 1000))
dims(stk)
dims(idx)
dims(idx[[1]])
stock <- propagate(ple4, 1000)
indices <- FLIndices(bts=propagate(ple4.indices[["BTS-Isis"]], 1000))
dms <- do.call(rbind.data.frame, c(list(catch = c(dims(stock), startf = NA, endf = NA)), lapply(indices, dims)))
dms
if (any(dms $ season[-1] > 1)) stop("only one season per survey - please split into seperate surveys.")
if (!identical(sort(unique(dms $ iter)), sort(unique(c(1L, max(dms $ iter)))))) stop("incosistent number of iterations in stock and indices")
sort(unique(dms $ iter))
sort(unique(c(1L, max(dms $ iter))))
sort(unique(dms $ iter))
sort(unique(c(1L, max(dms $ iter))))
stock <- propagate(ple4, 1000)
indices <- FLIndices(bts=propagate(ple4.indices[["BTS-Isis"]], 1000))
dms <- do.call(rbind.data.frame, c(list(catch = c(dims(stock), startf = NA, endf = NA)), lapply(indices, dims)))
# only allow 1 season for surveys
if (any(dms $ season[-1] > 1)) stop("only one season per survey - please split into seperate surveys.")
# the check
if (!identical(sort(unique(dms $ iter)), sort(unique(c(1L, max(dms $ iter)))))) stop("incosistent number of iterations in stock and indices")
sort(unique(dms $ iter))
sort(unique(c(1L, max(dms $ iter))))
library(FLCore)
showClass("FLStock")
is(showClass("FLStock"))
istr(showClass("FLStock"))
str(showClass("FLStock"))
is(showClass("FLStock"))
?showClass
getClassDef("FLStock")
is(getClassDef("FLStock"))
?classRepresentation
is(getClassDef("FLStock"))
??classRepresentation
getClassDef("FLStock")
getClassDef("FLStock")$slots
getClassDef("FLStock")@slots
plot(getClassDef("FLStock"))
getClassDef("FLStock")@slots
lst <- getClassDef("FLStock")@slots)
lst <- getClassDef("FLStock")@slots
lst
names(lst)
unlist(lst)
length(unlist(lst))
plot(unlist(lst))
v <- unlist(lst)
v=="FLQuant"
plot(v=="FLQuant"~names(v))
plot(as.numeric(v=="FLQuant")~names(v))
as.numeric(v=="FLQuant")
names(v)
plot(as.numeric(v=="FLQuant")~factor(names(v))
)
plot(as.numeric(v=="FLQuant")~factor(names(v)))
plot(v=="FLQuant"~factor(names(v)))
plot(v~factor(names(v)))
plot(factor(v)~factor(names(v)))
plot(factor(v)~factor(names(v)), x.rot=90)
plot(factor(names(v))~factor(v))
plot(as.character(v)~factor(names(v)))
plot(v~factor(names(v)))
v
plot(factor(names(v))~v)
plot(factor(names(v))~as.character(v))
plot(factor(names(v))~as.numeric(v))
plot(factor(names(v))~as.numeric(v=="FLQuant"))
plot(names(v)~as.numeric(v=="FLQuant"))
plot(as.numeric(v=="FLQuant")~factor(names(v)))
v
unique(v)
plot(unique(v)~names(v))
expand.grid(v)
expand.grid(v, names(v))
plot(expand.grid(v, names(v)), pch="")
plot(expand.grid(v, names(v)), pch=0)
plot(expand.grid(v, names(v)), type="n")
expand.grid(v, names(v))
expand.grid(v, names(v))
is(expand.grid(v, names(v)))
expand.grid(v, names(v))[,1]
v1 <- as.character(expand.grid(v, names(v))[,1])
v2 <- as.character(expand.grid(v, names(v))[,2])
plot(v1~v2)
ls()
lst
setwd("~/jrc/a4a/courses/2013-IPIMAR/04-a4aGr")
library(FLa4a)
data(rfLen)
showClass("a4aGr")
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))),
grInvMod=~t0-1/k*log(1-len/linf),
params=FLPar(linf=58.5, k=0.086, t0=0.001, units=c("cm","ano-1","ano"))
)
# a quick check about the model and it's inverse
lc=20
predict(vbObj, t=predict(vbObj, len=lc))==lc
predict(vbObj, len=5:10+0.5)
#------------------------------------------------------------------------------
# predicting lengths from ages
#------------------------------------------------------------------------------
predict(vbObj, t=seq(1, 2.5, 0.2))
#==============================================================================
# simulation
#==============================================================================
#------------------------------------------------------------------------------
# multivariate normal
#------------------------------------------------------------------------------
# vcov
mm <- matrix(NA, ncol=3, nrow=3)
diag(mm) <- c(100, 0.001,0.001)
mm[upper.tri(mm)] <- mm[lower.tri(mm)] <- c(0.1,0.1,0.0003)
# object
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))), grInvMod=~t0-1/k*log(1-len/linf), params=FLPar(linf=58.5, k=0.086, t0=0.001, units=c("cm","ano-1","ano")), vcov=mm, distr="norm")
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))),
grInvMod=~t0-1/k*log(1-len/linf),
params=FLPar(linf=58.5, k=0.086, t0=0.001,
units=c("cm","ano-1","ano")),
vcov=mm,
distr="norm")
# simulate
vbObj <- mvrnorm(100,vbObj)
# predict
predict(vbObj, len=5:10+0.5)
# plot
boxplot(t(predict(vbObj, t=0:50+0.5)))
#------------------------------------------------------------------------------
# copulas
#------------------------------------------------------------------------------
# getting vB pars from fishbase
# in this case I know the id of this species
addr <- "http://www.fishbase.org/PopDyn/PopGrowthList.php?ID=501"
tab <- try(readHTMLTable(addr))
library(XML)
tab <- read.csv("rfFB.csv")
linf <- tab[,1]
k <- tab[,3]
t0 <- tab[,4]
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))),
grInvMod=~t0-1/k*log(1-len/linf),
params=FLPar(linf=58.5, k=0.086, t0=0.001,
units=c("cm","ano-1","ano")),
vcov=mm)
pars <- list(
list(a=min(linf), b=max(linf), c=median(linf)),
list(a=min(k), b=max(k), c=median(k)),
list(a=median(t0, na.rm=T)-IQR(t0, na.rm=T)/2, b=median(t0, na.rm=T)+IQR(t0, na.rm=T)/2))
t0
median(t=, na.rm=T)
median(t0, na.rm=T)
min(t0, na.rm=T)
max(t0, na.rm=T)
pars <- list(
list(a=min(linf), b=max(linf), c=median(linf)),
list(a=min(k), b=max(k), c=median(k)),
list(a=min(t0, na.rm=T), b=max(t0, na.rm=T))
)
vbSim <- mvrtriangle(100, vbObj, paramMargins=pars)
x11()
par(mfrow=c(3,1))
hist(c(params(vbSim)["linf",]), main="linf")
hist(c(params(vbSim)["k",]), main="k", prob=TRUE)
hist(c(params(vbSim)["t0",]), main="t0")
vbSim <- mvrtriangle(1000, vbObj, paramMargins=pars)
# plot of marginals
par(mfrow=c(3,1))
hist(c(params(vbSim)["linf",]), main="linf")
hist(c(params(vbSim)["k",]), main="k", prob=TRUE)
hist(c(params(vbSim)["t0",]), main="t0")
# plot of covariance
splom(data.frame(t(params(vbSim)@.Data)), pch=".")
# model plot
par(mfrow=c(1,1))
boxplot(t(predict(vbSim, t=0:20+0.5)))
#------------------------------------------------------------------------------
# using triangle margins and archimedes copula
#------------------------------------------------------------------------------
vbSim <- mvrcop(100, vbObj, copula="archmCopula", family="clayton", param=2, margins="triangle", paramMargins=pars)
# plot of covariance
splom(data.frame(t(params(vbSim)@.Data)), pch=".")
vbSim <- mvrcop(1000, vbObj, copula="archmCopula", family="clayton", param=2, margins="triangle", paramMargins=pars)
# plot of covariance
splom(data.frame(t(params(vbSim)@.Data)), pch=".")
vbSim <- mvrtriangle(10000, vbObj, paramMargins=pars)
# plot of marginals
par(mfrow=c(3,1))
hist(c(params(vbSim)["linf",]), main="linf")
hist(c(params(vbSim)["k",]), main="k", prob=TRUE)
hist(c(params(vbSim)["t0",]), main="t0")
# plot of covariance
splom(data.frame(t(params(vbSim)@.Data)), pch=".")
# model plot
par(mfrow=c(1,1))
boxplot(t(predict(vbSim, t=0:20+0.5)))
#------------------------------------------------------------------------------
# using triangle margins and archimedes copula
#------------------------------------------------------------------------------
vbSim <- mvrcop(10000, vbObj, copula="archmCopula", family="clayton", param=2, margins="triangle", paramMargins=pars)
# plot of covariance
splom(data.frame(t(params(vbSim)@.Data)), pch=".")
# model plot
boxplot(t(predict(vbSim, t=0:20+0.5)))
#==============================================================================
# converting length to age
#==============================================================================
# growth object
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))), grInvMod=~t0-1/k*log(1-len/linf), params=FLPar(linf=58.5, k=0.086, t0=0.001, units=c("cm","ano-1","ano")), vcov=mm, distr="norm")
#--------------------------------------------------------------------
# converte catch-at-length to catch-at-age
#--------------------------------------------------------------------
cth.n <- l2a(catch.n(rfLen.stk), vbObj)
# trick
quant(cth.n) <- "len"
xyplot(data~len|qname, groups=year, data=(FLQuants(len=catch.n(rfLen.stk), age=cth.n)), type="l", xlab="", ylab="numbers")
#--------------------------------------------------------------------
# convert FLStock and FLIndex length objects to age objects
#--------------------------------------------------------------------
aStk <- l2a(rfLen.stk, vbObj)
units(harvest(aStk)) <- units(rfLen.stk@harvest)
plot(aStk)
# alternative with growth uncertainty
# NOTE: not working for now
# vbSim <- mvrtriangle(10, vbObj, paramMargins=pars)
# aStk <- l2a(rfLen.stk, vbSim)
# units(harvest(aStk)) <- units(rfLen.stk@harvest)
# plot(aStk)
# pre-process stock
# aStk <- collapseSeasons(aStk)
# catch(aStk) <- computeCatch(aStk)
# aStk <- setPlusGroup(aStk, 16)
# aStk <- trim(aStk, age=0:16)
aIdx <- l2a(rfTrawl.idx, vbObj)
#--------------------------------------------------------------------
# run assessment
#--------------------------------------------------------------------
# pre-process stock
aStk <- collapseSeasons(aStk)
aStk <- setPlusGroup(aStk, 16)
# pre-process index
index.var(aIdx)[] <- NA
range(aIdx)[c("startf", "endf")] <- c(0.20, 0.25)
aIdx <- trim(aIdx, age=0:15)
# run model
aStk <- aStk + a4a(stock=aStk, indices=FLIndices(aIdx))
x11()
plot(aStk)
setwd("~/jrc/a4a/courses/2013-IPIMAR/04-a4aGr")
library(FLa4a)
data(rfLen)
showClass("a4aGr")
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))),
grInvMod=~t0-1/k*log(1-len/linf),
params=FLPar(linf=58.5, k=0.086, t0=0.001,
units=c("cm","ano-1","ano"))
)
vbObj
FLPar(linf=58.5, k=0.086, t0=0.001,
units=c("cm","ano-1","ano")
)
lc=20
predict(vbObj, t=predict(vbObj, len=lc))==lc
predict(vbObj, len=lc)
predict(vbObj, t=predict(vbObj, len=lc))
predict(vbObj, len=5:10+0.5)
predict(vbObj, lenght=5:10+0.5)
predict(vbObj, t=seq(1, 2.5, 0.2))
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))),
grInvMod=~t0-1/k*log(1-len/linf),
params=FLPar(linf=58.5, k=0.086,
units=c("cm","ano-1","ano"))
)
predict(vbObj, len=5:10+0.5)
predict(vbObj, len=5:10+0.5, t0=0)
predict(vbObj, len=5:10+0.5, t0=0, linf=40)
predict(vbObj, len=5:10+0.5, t0=0)
mm <- matrix(NA, ncol=3, nrow=3)
diag(mm) <- c(100, 0.001,0.001)
mm[upper.tri(mm)] <- mm[lower.tri(mm)] <- c(0.1,0.1,0.0003)
mm
cov2cor(mm)
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))),
grInvMod=~t0-1/k*log(1-len/linf),
params=FLPar(linf=58.5, k=0.086, t0=0.001,
units=c("cm","ano-1","ano")),
vcov=mm,
distr="norm")
vbObj <- mvrnorm(100,vbObj)
is(vbObj)
predict(vbObj, len=5:10+0.5)
is(predict(vbObj, len=5:10+0.5))
vbObj@params
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))),
grInvMod=~t0-1/k*log(1-len/linf),
params=FLPar(linf=58.5, k=0.086, t0=0.001,
units=c("cm","ano-1","ano")),
vcov=mm,
distr="norm")
vbObj@params
vbObj <- mvrnorm(100,vbObj)
vbObj@params
predict(vbObj, len=5:10+0.5)
boxplot(t(predict(vbObj, t=0:50+0.5)))
x11()
boxplot(t(predict(vbObj, t=0:50+0.5)))
boxplot(t(predict(vbObj, len=0:50+0.5)))
warnings()
boxplot(t(predict(vbObj, t=0:50+0.5)))
tab <- read.csv("rfFB.csv")
linf <- tab[,1]
k <- tab[,3]
t0 <- tab[,4]
k
linf
t0
tab
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))),
grInvMod=~t0-1/k*log(1-len/linf),
params=FLPar(linf=58.5, k=0.086, t0=0.001,
units=c("cm","ano-1","ano")),
vcov=mm)
ls>()
ls()
tab
tab[,c(1,3)]
cor(tab[,c(1,3)])
pars <- list(
list(a=min(linf), b=max(linf), c=median(linf)),
list(a=min(k), b=max(k), c=median(k)),
list(a=min(t0, na.rm=T), b=max(t0, na.rm=T)))
vbSim <- mvrtriangle(10000, vbObj, paramMargins=pars)
dev.off()
dev.off()
dev.off()
x11()
par(mfrow=c(3,1))
hist(c(params(vbSim)["linf",]), main="linf")
hist(c(params(vbSim)["k",]), main="k", prob=TRUE)
hist(c(params(vbSim)["t0",]), main="t0")
splom(data.frame(t(params(vbSim)@.Data)), pch=".")
par(mfrow=c(1,1))
boxplot(t(predict(vbSim, t=0:20+0.5)))
vbSim <- mvrcop(10000, vbObj, copula="archmCopula", family="clayton", param=2, margins="triangle", paramMargins=pars)
# plot of covariance
splom(data.frame(t(params(vbSim)@.Data)), pch=".")
boxplot(t(predict(vbSim, t=0:20+0.5)))
splom(data.frame(t(params(vbSim)@.Data)), pch=".")
boxplot(t(predict(vbSim, t=0:20+0.5)))
vbObj <- a4aGr(grMod=~linf*(1-exp(-k*(t-t0))), grInvMod=~t0-1/k*log(1-len/linf), params=FLPar(linf=58.5, k=0.086, t0=0.001, units=c("cm","ano-1","ano")), vcov=mm, distr="norm")
#--------------------------------------------------------------------
# converte catch-at-length to catch-at-age
#--------------------------------------------------------------------
cth.n <- l2a(catch.n(rfLen.stk), vbObj)
# trick
quant(cth.n) <- "len"
xyplot(data~len|qname, groups=year, data=(FLQuants(len=catch.n(rfLen.stk), age=cth.n)), type="l", xlab="", ylab="numbers")
cth.n
aStk <- l2a(rfLen.stk, vbObj)
units(harvest(aStk)) <- units(rfLen.stk@harvest)
plot(aStk, main="length to age convertion")
aIdx <- l2a(rfTrawl.idx, vbObj)
aStk <- collapseSeasons(aStk)
aStk <- setPlusGroup(aStk, 16)
index.var(aIdx)[] <- NA
range(aIdx)[c("startf", "endf")] <- c(0.20, 0.25)
aIdx <- trim(aIdx, age=0:15)
aStk <- aStk + a4a(stock=aStk, indices=FLIndices(aIdx))
x11()
plot(aStk, main="assessed with a4a")
a4a()
args(a4a)
